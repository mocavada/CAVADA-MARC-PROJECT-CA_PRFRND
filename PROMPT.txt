
Next Prompt Template for TellerAPI Development

Objective: Test full ATM functionality, including SQL connection fallback, and prepare for new features like transaction history.

‚∏ª

1Ô∏è‚É£ Setup and Initialization

// Program.cs
using System;
using TellerAPI.Models;
using TellerAPI.Services;
using Microsoft.EntityFrameworkCore;

class Program
{
    static void Main()
    {
        Bank bank;

        try
        {
            var optionsBuilder = new DbContextOptionsBuilder<TellerDbContext>();
            optionsBuilder.UseSqlServer("Server=localhost,1433;Database=ATM;User Id=sa;Password=YourStrong!Pass123;");
            using var context = new TellerDbContext(optionsBuilder.Options);

            if (context.Database.CanConnect())
            {
                Console.WriteLine("‚úÖ Connected to SQL Server.");
                bank = new Bank(context);
            }
            else
            {
                throw new Exception("SQL not available");
            }
        }
        catch
        {
            Console.WriteLine("‚ö†Ô∏è SQL connection failed. Using local text data...");
            string dataFolder = Path.Combine(AppContext.BaseDirectory, "Data");
            var (accounts, customers) = Bank.LoadFromFiles(dataFolder);
            bank = new Bank(accounts, customers);
        }

        // Launch ATM Service
        var atmService = new ATMService(bank);
        atmService.Start();
    }
}



‚∏ª

2Ô∏è‚É£ Bank & Account Testing
	‚Ä¢	Ensure Bank can:
	‚Ä¢	Load from SQL if available
	‚Ä¢	Fallback to .txt if SQL fails
	‚Ä¢	Find accounts by number
	‚Ä¢	Test all Account actions:
	‚Ä¢	Deposit(decimal amount)
	‚Ä¢	Withdraw(decimal amount)
	‚Ä¢	ToString() for display

‚∏ª

3Ô∏è‚É£ ATMService Testing
	1.	Prompt for account number
	2.	Validate login
	3.	Test transaction loop:
	‚Ä¢	Deposit
	‚Ä¢	Withdraw
	‚Ä¢	Check balance
	‚Ä¢	Exit
	4.	Verify fallback works by temporarily stopping SQL server.

‚∏ª

4Ô∏è‚É£ Next Feature Additions
	‚Ä¢	Transaction History: Log every deposit/withdrawal per account
	‚Ä¢	Multiple Accounts per Customer: Allow one customer to hold multiple accounts
	‚Ä¢	Better UI Prompts: Show account type, customer name, etc.
	‚Ä¢	Unit Testing: Verify:
	‚Ä¢	Bank.FindAccount
	‚Ä¢	Deposit/Withdraw
	‚Ä¢	Fallback logic
	‚Ä¢	ATMService menu actions

‚∏ª

‚úÖ Developer Notes
	‚Ä¢	All EF Core models:
	‚Ä¢	abstract Account
	‚Ä¢	CheckingAccount : Account
	‚Ä¢	SavingsAccount : Account
	‚Ä¢	Customer
	‚Ä¢	DbContext handles TPH inheritance for accounts
	‚Ä¢	.txt files format:
	‚Ä¢	Accounts.txt: Type,CustomerID,AccountNumber,Balance
	‚Ä¢	Customer.txt: Name,CustomerID

‚∏ª

TellerAPI Test Scenario Script

Instructions: Copy this into your next session or run step by step in the console.

‚∏ª

1Ô∏è‚É£ Test SQL Connection & Fallback
	1.	Stop SQL Server (or keep it running to test live connection).
	2.	Run your program:

dotnet run --project TellerAPI/TellerAPI.csproj

	3.	Expected Output:

	‚Ä¢	‚úÖ Connected to SQL Server (if running)
	‚Ä¢	‚ö†Ô∏è SQL connection failed. Using local text data‚Ä¶ (if SQL stopped)
	‚Ä¢	üè¶ Welcome to the Teller API
	‚Ä¢	Loaded X accounts from source.

‚∏ª

2Ô∏è‚É£ Test Account Login
	‚Ä¢	Enter valid account numbers from your .txt or SQL:
	‚Ä¢	10021, 20034, 20008, etc.
	‚Ä¢	Enter invalid account numbers to test error handling.
	‚Ä¢	Expected Output:
	‚Ä¢	‚úÖ Found Account: shows account number, customer name, and balance
	‚Ä¢	‚ùå Account not found. Try again.

‚∏ª

3Ô∏è‚É£ Test Transaction Loop

ATMService menu:

1. Deposit
2. Withdraw
3. Check Balance
4. Exit

Deposit
	‚Ä¢	Select 1
	‚Ä¢	Enter a valid amount: 50.75
	‚Ä¢	Enter invalid amounts: -20, abc
	‚Ä¢	Expected Output:
	‚Ä¢	‚úÖ New Balance: updates correctly
	‚Ä¢	‚ùå Deposit amount must be positive.
	‚Ä¢	‚ùå Invalid amount entered.

Withdraw
	‚Ä¢	Select 2
	‚Ä¢	Enter a valid amount smaller than balance: 10
	‚Ä¢	Enter amount larger than balance: 9999
	‚Ä¢	Enter invalid amounts: -5, xyz
	‚Ä¢	Expected Output:
	‚Ä¢	‚úÖ New Balance: decreases correctly
	‚Ä¢	‚ùå Insufficient funds!
	‚Ä¢	‚ùå Invalid amount entered.

Check Balance
	‚Ä¢	Select 3
	‚Ä¢	Verify it matches previous transactions

Exit
	‚Ä¢	Select 4
	‚Ä¢	Console prints: üëã Thank you for using TellerAPI!

‚∏ª

4Ô∏è‚É£ Test Multiple Accounts / Edge Cases
	‚Ä¢	Try logging in with several account numbers in a row
	‚Ä¢	Verify balances are independent
	‚Ä¢	Ensure .txt fallback works for all accounts listed

‚∏ª

5Ô∏è‚É£ Logging / Validation
	‚Ä¢	Manually check that balances update correctly after each deposit/withdrawal
	‚Ä¢	If using .txt fallback, confirm all 10 accounts load
	‚Ä¢	If SQL active, confirm EF Core loads accounts without errors (watch for Discriminator column if using inheritance)

‚∏ª

This script is designed to cover all current functionality and validate SQL fallback.

